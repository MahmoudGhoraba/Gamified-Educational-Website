<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Base styles */
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Poppins', sans-serif;
            background: #f4f8f5;
            color: #3a3e3b;
        }

        .container {
            max-width: 1200px;
            margin: 80px auto;
            padding: 20px;
        }

        h1 {
            font-size: 2.5rem;
            color: #3a3e3b;
            margin-bottom: 40px;
            text-align: center;
        }

        /* Table styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 40px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        th {
            background-color: #189A3A;
            color: white;
            font-weight: 500;
        }

        tr:hover {
            background-color: #f8fafc;
        }

        /* Form styling */
        form {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #3a3e3b;
            font-weight: 500;
        }

        input[type="text"], select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
            background: #f8fafc;
        }

        input[type="text"]:focus, select:focus {
            border-color: #189A3A;
            box-shadow: 0 0 0 3px rgba(24, 154, 58, 0.1);
            background: white;
            outline: none;
        }

        /* Button styling */
        .button-link {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            outline: none;
            color: white;
            background-color: #189A3A;
            border: none;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .button-link:hover {
            background-color: #117a2d;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

        .button-link:active {
            transform: translateY(0);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        /* Section headers */
        .section-header {
            font-size: 1.8rem;
            color: #189A3A;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid #189A3A;
            display: inline-block;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .container {
                margin: 40px auto;
                padding: 15px;
            }

            h1 {
                font-size: 2rem;
            }

            table, th, td {
                font-size: 14px;
            }

            .button-link {
                width: 100%;
                margin-bottom: 10px;
            }
        }
    </style>
    <script>
        async function viewModules(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('modulesTable');
                table.innerHTML = '<tr><th>Module ID</th><th>Course ID</th><th>Title</th><th>Difficulty</th><th>Content URL</th></tr>';
                result.data.forEach(module => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    cell1.innerHTML = module.moduleId;
                    cell2.innerHTML = module.courseId;
                    cell3.innerHTML = module.title;
                    cell4.innerHTML = module.difficulty;
                    cell5.innerHTML = module.contentUrl;
                });
            } else {
                alert(result.message);
            }
        }

        async function viewEnrolledCourses(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('enrolledCoursesTable');
                table.innerHTML = '<tr><th>Course ID</th><th>Title</th><th>Learning Objective</th><th>Credit Points</th><th>Difficulty Level</th><th>Description</th></tr>';
                result.data.forEach(course => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    const cell6 = row.insertCell(5);
                    cell1.innerHTML = course.courseId;
                    cell2.innerHTML = course.title;
                    cell3.innerHTML = course.learningObjective;
                    cell4.innerHTML = course.creditPoints;
                    cell5.innerHTML = course.difficultyLevel;
                    cell6.innerHTML = course.description;
                });
            } else {
                alert(result.message);
            }
        }

        async function viewPreviousCourses(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('previousCoursesTable');
                table.innerHTML = '<tr><th>Course ID</th><th>Title</th><th>Learning Objective</th><th>Credit Points</th><th>Difficulty Level</th><th>Description</th></tr>';
                result.data.forEach(course => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    const cell6 = row.insertCell(5);
                    cell1.innerHTML = course.courseId;
                    cell2.innerHTML = course.title;
                    cell3.innerHTML = course.learningObjective;
                    cell4.innerHTML = course.creditPoints;
                    cell5.innerHTML = course.difficultyLevel;
                    cell6.innerHTML = course.description;
                });
            } else {
                alert(result.message);
            }
        }

        async function checkPrerequisites(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                alert("Prerequisites met.");
            } else {
                alert(result.message);
            }
        }

        async function registerCourse(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            alert(result.message);
        }
    </script>
</head>
<body>
<div class="container">
    <h1>Course Catalog</h1>

    <!-- View Modules Section -->
    <div class="section-header">View Modules</div>
    <form asp-controller="LakshyLearner" asp-action="ViewModules" method="post" onsubmit="viewModules(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit" class="button-link">View Modules</button>
    </form>
    <table id="modulesTable">
        <tr>
            <th>Module ID</th>
            <th>Course ID</th>
            <th>Title</th>
            <th>Difficulty</th>
            <th>Content URL</th>
        </tr>
    </table>

    <!-- View Enrolled Courses Section -->
    <div class="section-header">View Enrolled Courses</div>
    <form asp-controller="LakshyLearner" asp-action="ViewEnrolledCourses" method="post" onsubmit="viewEnrolledCourses(event)">
        <button type="submit" class="button-link">View Enrolled Courses</button>
    </form>
    <table id="enrolledCoursesTable">
        <tr>
            <th>Course ID</th>
            <th>Title</th>
            <th>Learning Objective</th>
            <th>Credit Points</th>
            <th>Difficulty Level</th>
            <th>Description</th>
        </tr>
    </table>

    <!-- Previous Courses Section -->
    <div class="section-header">Previous Courses</div>
    <form asp-controller="LakshyLearner" asp-action="ViewPreviousCourses" method="post" onsubmit="viewPreviousCourses(event)">
        <button type="submit" class="button-link">View Previous Courses</button>
    </form>
    <table id="previousCoursesTable">
        <tr>
            <th>Course ID</th>
            <th>Title</th>
            <th>Learning Objective</th>
            <th>Credit Points</th>
            <th>Difficulty Level</th>
            <th>Description</th>
        </tr>
    </table>

    <!-- Check Prerequisites Section -->
    <div class="section-header">Check Prerequisites</div>
    <form asp-controller="LakshyLearner" asp-action="CheckPrerequisites" method="post" onsubmit="checkPrerequisites(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit" class="button-link">Check Prerequisites</button>
    </form>

    <!-- Register Course Section -->
    <div class="section-header">Register Course</div>
    <form asp-controller="LakshyLearner" asp-action="RegisterCourse" method="post" onsubmit="registerCourse(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit" class="button-link">Register Course</button>
    </form>

    <!-- Error Message Display -->
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="error-message">
            <p>@ViewBag.ErrorMessage</p>
        </div>
    }
</div>
</body>
</html>
