@{
    ViewData["Title"] = "Admin Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }

        table, th, td {
            border: 1px solid black;
        }

        th, td {
            padding: 15px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .button-link {
            display: inline-block;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            text-decoration: none;
            outline: none;
            color: #fff;
            background-color: #4CAF50;
            border: none;
            border-radius: 15px;
            box-shadow: 0 9px #999;
        }

            .button-link:hover {
                background-color: #3e8e41
            }

            .button-link:active {
                background-color: #3e8e41;
                box-shadow: 0 5px #666;
                transform: translateY(4px);
            }
    </style>
    <script>
        async function viewModules(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('modulesTable');
                table.innerHTML = '<tr><th>Module ID</th><th>Course ID</th><th>Title</th><th>Difficulty</th><th>Content URL</th></tr>';
                result.data.forEach(module => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    cell1.innerHTML = module.moduleId;
                    cell2.innerHTML = module.courseId;
                    cell3.innerHTML = module.title;
                    cell4.innerHTML = module.difficulty;
                    cell5.innerHTML = module.contentUrl;
                });
            } else {
                alert(result.message);
            }
        }

        async function viewEnrolledCourses(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('enrolledCoursesTable');
                table.innerHTML = '<tr><th>Course ID</th><th>Title</th><th>Learning Objective</th><th>Credit Points</th><th>Difficulty Level</th><th>Description</th></tr>';
                result.data.forEach(course => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    const cell6 = row.insertCell(5);
                    cell1.innerHTML = course.courseId;
                    cell2.innerHTML = course.title;
                    cell3.innerHTML = course.learningObjective;
                    cell4.innerHTML = course.creditPoints;
                    cell5.innerHTML = course.difficultyLevel;
                    cell6.innerHTML = course.description;
                });
            } else {
                alert(result.message);
            }
        }

        async function viewPreviousCourses(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                const table = document.getElementById('previousCoursesTable');
                table.innerHTML = '<tr><th>Course ID</th><th>Title</th><th>Learning Objective</th><th>Credit Points</th><th>Difficulty Level</th><th>Description</th></tr>';
                result.data.forEach(course => {
                    const row = table.insertRow();
                    const cell1 = row.insertCell(0);
                    const cell2 = row.insertCell(1);
                    const cell3 = row.insertCell(2);
                    const cell4 = row.insertCell(3);
                    const cell5 = row.insertCell(4);
                    const cell6 = row.insertCell(5);
                    cell1.innerHTML = course.courseId;
                    cell2.innerHTML = course.title;
                    cell3.innerHTML = course.learningObjective;
                    cell4.innerHTML = course.creditPoints;
                    cell5.innerHTML = course.difficultyLevel;
                    cell6.innerHTML = course.description;
                });
            } else {
                alert(result.message);
            }
        }

        async function checkPrerequisites(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            if (result.success) {
                alert("Prerequisites met.");
            } else {
                alert(result.message);
            }
        }

        async function registerCourse(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
            const response = await fetch(form.action, {
                method: form.method,
                body: formData
            });
            const result = await response.json();
            alert(result.message);
        }
    </script>
</head>
<body>

    <h1>View Modules</h1>

    <form asp-controller="LakshyLearner" asp-action="ViewModules" method="post" onsubmit="viewModules(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit">View Modules</button>
    </form>

    <table id="modulesTable" border="1">
        <tr>
            <th>Module ID</th>
            <th>Course ID</th>
            <th>Title</th>
            <th>Difficulty</th>
            <th>Content URL</th>
        </tr>
    </table>

    <h1>View Enrolled Courses</h1>

    <form asp-controller="LakshyLearner" asp-action="ViewEnrolledCourses" method="post" onsubmit="viewEnrolledCourses(event)">
        
        <button type="submit">View Enrolled Courses</button>
    </form>

    <table id="enrolledCoursesTable" border="1">
        <tr>
            <th>Course ID</th>
            <th>Title</th>
            <th>Learning Objective</th>
            <th>Credit Points</th>
            <th>Difficulty Level</th>
            <th>Description</th>
        </tr>
    </table>

    <h1>Previous Courses</h1>

    <form asp-controller="LakshyLearner" asp-action="ViewPreviousCourses" method="post" onsubmit="viewPreviousCourses(event)">
        <button type="submit">View Previous Courses</button>
    </form>

    <table id="previousCoursesTable" border="1">
        <tr>
            <th>Course ID</th>
            <th>Title</th>
            <th>Learning Objective</th>
            <th>Credit Points</th>
            <th>Difficulty Level</th>
            <th>Description</th>
        </tr>
    </table>

    <h1>Check Prerequisites</h1>

    <form asp-controller="LakshyLearner" asp-action="CheckPrerequisites" method="post" onsubmit="checkPrerequisites(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit">Check Prerequisites</button>
    </form>

    <h1>Register Course</h1>

    <form asp-controller="LakshyLearner" asp-action="RegisterCourse" method="post" onsubmit="registerCourse(event)">
        <label for="courseId">Course ID:</label>
        <input type="text" id="courseId" name="courseId" required />
        <button type="submit">Register Course</button>
    </form>

    @if (ViewBag.ErrorMessage != null)
    {
        <div class="error-message">
            <p>@ViewBag.ErrorMessage</p>
        </div>
    }
    @if (ViewBag.ErrorMessage != null)
    {
        <div class="error-message">
            <p>@ViewBag.ErrorMessage</p>
        </div>
    }
</body>
</html>